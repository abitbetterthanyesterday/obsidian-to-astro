export const snapshot = {};

snapshot[`the schema matches the snapshot 1`] = `
ZodObject {
  _cached: null,
  _catchall: undefined,
  _def: {
    catchall: ZodNever {
      _def: {
        typeName: "ZodNever",
      },
      _input: undefined,
      _output: undefined,
      _type: undefined,
      and: [Function: bound and],
      array: [Function: bound array],
      default: [Function: bound default],
      describe: [Function: bound describe],
      isNullable: [Function: bound isNullable],
      isOptional: [Function: bound isOptional],
      nullable: [Function: bound nullable],
      nullish: [Function: bound nullish],
      optional: [Function: bound optional],
      or: [Function: bound or],
      parse: [Function: bound parse],
      parseAsync: [AsyncFunction: bound parseAsync],
      promise: [Function: bound promise],
      refine: [Function: bound refine],
      refinement: [Function: bound refinement],
      safeParse: [Function: bound safeParse],
      safeParseAsync: [AsyncFunction: bound safeParseAsync],
      spa: [AsyncFunction: bound safeParseAsync],
      superRefine: [Function: bound _refinement],
      transform: [Function: bound transform],
    },
    shape: [Function: shape],
    typeName: "ZodObject",
    unknownKeys: "strip",
  },
  _input: undefined,
  _output: undefined,
  _shape: undefined,
  _type: undefined,
  _unknownKeys: undefined,
  and: [Function: bound and],
  array: [Function: bound array],
  augment: [Function],
  default: [Function: bound default],
  describe: [Function: bound describe],
  extend: [Function],
  isNullable: [Function: bound isNullable],
  isOptional: [Function: bound isOptional],
  nonstrict: [Function: passthrough],
  nullable: [Function: bound nullable],
  nullish: [Function: bound nullish],
  optional: [Function: bound optional],
  or: [Function: bound or],
  parse: [Function: bound parse],
  parseAsync: [AsyncFunction: bound parseAsync],
  promise: [Function: bound promise],
  refine: [Function: bound refine],
  refinement: [Function: bound refinement],
  safeParse: [Function: bound safeParse],
  safeParseAsync: [AsyncFunction: bound safeParseAsync],
  spa: [AsyncFunction: bound safeParseAsync],
  superRefine: [Function: bound _refinement],
  transform: [Function: bound transform],
}
`;
